
//pages\_app.tsx
import Link from 'next/link';
<Link href="/dashboard/add">Add User</Link>

// pages/dashboard/add.tsx
import MultiStepForm from '@/components/MultiStepForm';
import ThemeToggle from '@/components/ThemeToggle';
import Link from 'next/link';

export default function AddUser() {
  return (
    <div className="min-h-screen p-6 dark:bg-gray-900 dark:text-white">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Add User</h1>
        <ThemeToggle />
      </div>
      <MultiStepForm />
      <Link href="/dashboard" className="mt-6 inline-block text-blue-500 underline">
        ‚Üê Back to Dashboard
      </Link>
    </div>
  );
}

// pages/dashboard.tsx
import { useEffect, useState } from 'react';
import axios from 'axios';
import Link from 'next/link';
import ThemeToggle from '@/components/ThemeToggle';
import UserTable from '@/components/UserTable';

type User = {
  id: number;
  name: string;
  email: string;
  phone: string;
  address: { city: string };
};

export default function Dashboard() {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [search, setSearch] = useState('');

  useEffect(() => {
    axios.get('https://jsonplaceholder.typicode.com/users')
      .then((res) => setUsers(res.data))
      .catch(() => setError('Failed to fetch users'))
      .finally(() => setLoading(false));
  }, []);

  const filteredUsers = users.filter(
    (u) =>
      u.name.toLowerCase().includes(search.toLowerCase()) ||
      u.address.city.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div className="min-h-screen p-6 dark:bg-gray-900 dark:text-white">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Dashboard</h1>
        <ThemeToggle />
      </div>
      <div className="flex justify-between items-center mb-4">
        <input
          placeholder="Search by name or city"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="p-2 border rounded dark:bg-gray-800"
        />
        <Link href="/dashboard/add" className="bg-blue-600 text-white px-4 py-2 rounded">
          Add User
        </Link>
      </div>
      {loading && <p>Loading...</p>}
      {error && <p className="text-red-500">{error}</p>}
      {!loading && !error && <UserTable users={filteredUsers} />}
    </div>
  );
}

// pages/index.tsx
import { useEffect } from 'react';
import { useRouter } from 'next/router';

export default function Home() {
  const router = useRouter();

  useEffect(() => {
    router.replace('/dashboard');
  }, [router]);

  return null;
}

// components/UserTable.tsx
export default function UserTable({ users }: { users: any[] }) {
  return (
    <table className="w-full border">
      <thead className="bg-gray-100 dark:bg-gray-700">
        <tr>
          <th>Name</th><th>Email</th><th>Phone</th><th>City</th>
        </tr>
      </thead>
      <tbody>
        {users.map((u) => (
          <tr key={u.id} className="border-t">
            <td>{u.name}</td>
            <td>{u.email}</td>
            <td>{u.phone}</td>
            <td>{u.address.city}</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

// components/ThemeToggle.tsx

import { useEffect, useState } from 'react';

export default function ThemeToggle() {
  const [dark, setDark] = useState(false);

  useEffect(() => {
    document.documentElement.classList.toggle('dark', dark);
  }, [dark]);

  return (
    <button onClick={() => setDark((d) => !d)}>
      {dark ? '‚òÄÔ∏è Light' : 'üåô Dark'}
    </button>
  );
}

// components/MultiStepForm.tsx
import { useForm, FormProvider } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { motion } from 'framer-motion';
import { useState, useEffect } from 'react';
import toast from 'react-hot-toast';

const schema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
  street: z.string().min(1),
  city: z.string().min(1),
  zip: z.string().min(1),
});

type FormData = z.infer<typeof schema>;

const steps = ['Basic Info', 'Address', 'Review'];

export default function MultiStepForm() {
  const methods = useForm<FormData>({
    resolver: zodResolver(schema),
    mode: 'onChange',
    defaultValues: JSON.parse(localStorage.getItem('formData') || '{}'),
  });

  const { register, watch, handleSubmit, formState: { errors } } = methods;
  const [step, setStep] = useState(0);

  useEffect(() => {
    const subscription = watch((data) => {
      localStorage.setItem('formData', JSON.stringify(data));
    });
    return () => subscription.unsubscribe();
  }, [watch]);

  const onSubmit = (data: FormData) => {
    console.log('Submitted:', data);
    toast.success('User added!');
    localStorage.removeItem('formData');
  };

  return (
    <FormProvider {...methods}>
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-4 max-w-md">
        <motion.div key={step} initial={{ x: 100 }} animate={{ x: 0 }} className="space-y-4">
          {step === 0 && (
            <>
              <input {...register('name')} placeholder="Name" className="input" />
              {errors.name && <p className="text-red-500">Name required</p>}
              <input {...register('email')} placeholder="Email" className="input" />
              {errors.email && <p className="text-red-500">Valid email required</p>}
            </>
          )}
          {step === 1 && (
            <>
              <input {...register('street')} placeholder="Street" className="input" />
              <input {...register('city')} placeholder="City" className="input" />
              <input {...register('zip')} placeholder="Zip" className="input" />
            </>
          )}
          {step === 2 && (
            <div>
              {Object.entries(watch()).map(([key, value]) => (
                <p key={key}><strong>{key}:</strong> {value}</p>
              ))}
            </div>
          )}
        </motion.div>

        <div className="flex gap-2">
          {step > 0 && <button type="button" onClick={() => setStep((s) => s - 1)}>Back</button>}
          {step < 2 && <button type="button" onClick={() => setStep((s) => s + 1)}>Next</button>}
          {step === 2 && <button type="submit" className="bg-green-600 text-white px-4 py-2">Submit</button>}
        </div>
      </form>
    </FormProvider>
  );
}
